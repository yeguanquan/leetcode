给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11

解析
题目要求的是连续节点的求和，因此很容易联想到数组中的连续和问题。
即对于数组array[n], 使用sums[n+1]保存从0~n的和，则下表i~j结点的和为sums[j] - sums[i-1];

题解
class Solution {
private:
    vector<int> sums;
    int count = 0;
public:
    int pathSum(TreeNode* root, int sum) {
        if (root == NULL) return 0;
        sums.resize(maxDepth(root) + 1, 0);
        travel(root, 1, sum);
        return count;
    }

    int maxDepth(TreeNode* t){  // 获取树的深度，用以确定sums数组的大小
        if (t == NULL) return 0;
        return max(maxDepth(t->left), maxDepth(t->right)) + 1;
    }

    void travel(TreeNode* node, int level, int sum){
        if (node == NULL) return ;
        sums[level] = sums[level-1] + node->val;
        for (int i = 0; i < level; i++) if (sums[level] - sums[i] == sum) count++;
        travel(node->left, level+1, sum);
        travel(node->right, level+1, sum);
    }
};
时间复杂度O(n*logn) 空间复杂度O(logn)
