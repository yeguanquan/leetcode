给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。

找到所有在 [1, n] 范围之间没有出现在数组中的数字。

您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。

示例:

输入:
[4,3,2,7,8,2,3,1]

输出:
[5,6]








解题思路
原理：每个数只出现一次，所以每个下标都会被数组中某个位置的值所对应，有的数出现两次，必然会访问两次，而我们拒绝访问两次，即可知道被拒绝位置的下标，例子如下。
4 3 2 7 8 2 3 1 错误数组，从第一个数开始
4 3 2 -1 8 2 3 1 第四个位置访问过，记录7
4 3 2 -1 8 2 -1 1 第七个位置访问过，记录3
4 3 -1 -1 8 2 -1 1 第三个位置访问过。记录2
4 -1 -1 -1 8 2 -1 1 第二个位置访问过，记录3，发现3已经访问过，本次环结束，跳过-1的值
4 -1 -1 -1 8 2 -1 -1 到了第五个位置的8，第八个位置访问过，记录1
-1 -1 -1 -1 8 2 -1 -1 第一个位置访问过，记录4,4已经访问过，继续，第六个位置2，2也访问过，跳过
最终发现第五第六个位置都没有别人访问过，则为缺失，复杂度o(n)，空间o(1)。

代码
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        // 4 3 2 7 8 2 3 1
        /*
            4 3 2 -1 8 2 3 1
            4 3 2 -1 8 2 -1 1
            4 3 -1 -1 8 2 -1 1
            4 -1 -1 -1 8 2 -1 1
            4 -1 -1 -1 8 2 -1 -1
            -1 -1 -1 -1 8 2 -1 -1
        */
        vector<int>ans;
        int len = nums.size();
        int next = 0;
        for (int i = 0; i < len; ++i) {
            if (nums[i] == -1)
                continue;
            next = nums[i];
            while (next != -1 && nums[next-1]!=-1) {
                int temp = nums[next - 1];
                nums[next-1] = -1;
                next = temp;
            }
            next = 0;
        }
        for (int i = 0; i < len; ++i)
            if (nums[i] != -1)
                ans.push_back(i + 1);
        return ans;
    }
